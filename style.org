#+title: My Preferred CSS
#+PROPERTY: header-args:css :tangle style.css :results silent

CSS styles for my blog. I tangle this file to =style.css=. I try to
exercise all the styles in [[file:content/style-demo.org][style-demo]].

* Colours

This week I'm fond of green. 

#+begin_src css
:root {
    --accent: #004400;
    --alt-accent: #ccffcc;
    --footnotes: gray;
}
#+end_src

* Org Default

I'll pick from this and remove most of what I don't use.

#+begin_src css
.title  { text-align: center;
          margin-bottom: .2em; }
.subtitle { text-align: center;
            font-size: medium;
            font-weight: bold;
            margin-top:0; }
p.verse { margin-left: 3% }
#+end_src

* Set the Scene

Fonts, navigation, and colourful header and footer.

#+begin_src css
body {
    font-size: x-large;
    line-height: 1.5;
    margin: 0;
}

h1, h2, h3, h4, h5, h6, .subtitle {color: var(--accent)}

#preamble, #content, #postamble {
    padding: 1mm;
}

#preamble, #postamble {
    background-color: var(--alt-accent);
    border-radius: 1px;
}

#preamble {border-bottom: 3px solid var(--accent)}
#postamble {border-top: 3px solid var(--accent)}

header, footer {
    display: flex;
    flex-wrap: wrap;
}

.header-title > a:link, a:visited {text-decoration: none}

.header-title,
.header-nav,
.footer-copyright,
.footer-nav {flex: 100%}

.posted-date {
    font-size: smaller;
    text-align: center;
}

.header-nav > nav > ul {justify-content: center}
.footer-nav > nav > ul {justify-content: end}

nav > ul {
    list-style: none;
    display: flex;
    padding: 0;
    margin: 0;
}

nav > ul > li + li:before {
    content: "â€¢";
    padding: 0 0.5em;
    color: var(--accent);
}

#+end_src

* Tables

Most of this is straight out of Org's default CSS, but I like me some
borders!

#+begin_src css
table { border-collapse:collapse; }
caption.t-above { caption-side: top; }
caption.t-bottom { caption-side: bottom; }
td, th { vertical-align:top;  }
th.org-right  { text-align: center;  }
th.org-left   { text-align: center;   }
th.org-center { text-align: center; }
td.org-right  { text-align: right;  }
td.org-left   { text-align: left;   }
td.org-center { text-align: center; }

table, thead, tbody {border: 1px solid var(--accent)}
thead {background-color: var(--alt-accent)}
th, td {padding: 0em 0.5em}
tr:nth-child(even){background-color: var(--alt-accent)}
#+end_src

* Tags

My index page has tags to classify posts. This makes them look snazzy,
I think. [[https://gongzhitaao.org/orgcss/][Credit]].

#+begin_src css
.tag {
    float: right;
    background-clip: padding-box;
    font-family: monospace;
    padding: 0;
    font-size: smaller;
    font-weight: normal;
}

.tag span {
    background-color: var(--alt-accent);
    border-top: 1px solid var(--accent);
    border-bottom: 1px solid var(--accent);
    border-radius: 1px;
    line-height: 1;
    margin-left: .3em;
    padding: .3em;
}
#+end_src

* Footnotes

These get a diminutive ~<hr/>~ above, and have slightly lighter
font colour to make them stand out less.

#+begin_src css
.footpara {display: inline}
.footdef {margin-bottom: 1em}

#footnotes {
    color: var(--footnotes);
    font-size: smaller;
}

#footnotes hr {
    border: 0;
    border-top: 1px solid var(--accent);
    border-radius: 1px;
    width: 50%;
}
#+end_src

* Figures

#+begin_src css
.figure { padding: 1em; }
.figure p { text-align: center; }
#+end_src

* Images

Scale images down if they're wider than the text.

#+begin_src css
img {max-width: 95%}
#+end_src

* Checkboxes

#+begin_src css
.off > code {
    font-family: monospace;
    color: red;
}
.on > code {
    font-family: monospace;
    color: green;
}
.trans > code {
    font-family: monospace;
    color: orange;
}
#+end_src

* Styling source code

With ~(setq org-html-htmlize-output-type "css")~ Org will publish
source code markup with semantic CSS selectors rather than inline CSS.
This allows us to get nice-looking output even when Emacs is
publishing in ~--batch~ mode.

#+begin_src css
pre {
    border: 1px solid #e6e6e6;
    border-radius: 3px;
    background-color: #f2f2f2;
    padding: 8pt;
    font-family: monospace;
    overflow: auto;
    margin: 1.2em;
}
pre.src {
    position: relative;
    overflow: auto;
}
pre.src:before {
    display: none;
    position: absolute;
    top: -8px;
    right: 12px;
    padding: 3px;
    color: #555;
    background-color: #f2f2f299;
}
pre.src:hover:before { display: inline; margin-top: 14px;}
pre.src-C:before { content: 'C'; }
pre.src-clojure:before { content: 'Clojure'; }
pre.src-emacs-lisp:before { content: 'Emacs Lisp'; }
pre.src-org:before { content: 'Org mode'; }
pre.src-sh:before { content: 'shell'; }
pre.src-sql:before { content: 'SQL'; }
pre.src-makefile:before { content: 'Makefile'; }
pre.src-perl:before { content: 'Perl'; }
pre.src-scala:before { content: 'Scala'; }
pre.src-xml:before { content: 'XML'; }
pre.src-conf:before { content: 'Configuration File'; }

.org-builtin {color: #483d8b}
.org-clojure-keyword {color: #008b8b}
.org-comment {color: #b22222}
.org-comment-delimiter {color: #b22222}
.org-doc {color: #8b2252}
.org-function-name {color: #0000ff}
.org-keyword {color: #a020f0}
.org-string {color: #8b2252}
.org-type {color: #228b22}
.org-variable-name {color: #a0522d}
#+end_src

When asking Org to number source code examples it uses these classes.

#+begin_src css
.linenr {font-size: smaller}
.code-highlighted {background-color: var(--accent)}
#+end_src

* Equations

#+begin_src css
.equation-container {
    display: table;
    text-align: center;
    width: 100%;
}
.equation {
    vertical-align: middle;
}
.equation-label {
    display: table-cell;
    text-align: right;
    vertical-align: middle;
}
#+end_src
* Cater for bigger screens

I target small screens by default, but here I make allowances for
larger screens.

Increase the body's font size, and limit its width. Center the body by
automatically adjusting margins surrounding it.

Introduce small margin & padding around figures, which looks a bit
nicer on big screens. Particularly when used in a columnar layout,
which we also activate here.

#+begin_src css
@media (min-width: 600px) {
    #content {
        max-width: 65ch;
        margin: auto;
    }

    figure {
        margin: 1ch;
        padding: 1ch;
    }

    .row {display: flex}
    .column {flex: 50%}

    .footer-copyright,
    .footer-nav {flex: 50%}
}
#+end_src
