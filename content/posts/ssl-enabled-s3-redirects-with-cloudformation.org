#+title: Setting up SSL-enabled S3 redirection with CloudFormation
#+date: <2017-07-21 Fri>
#+category: CloudFormation
#+category: S3

This is the third post in an ongoing [[file:adding-ssl.org][series]] in which I move my blog to
HTTPS. In the [[file:route-53-cloudformation.org][previous post]] I learnt how to set up DNS in Route 53
using CloudFormation and Sceptre. In this post I will learn how to set
up a redirection from the Apex domain (i.e. superloopy.io) to
www.superloopy.io.

#+toc: headlines

* Outputs
  :PROPERTIES:
  :CUSTOM_ID: outputs
  :END:

In addition to ~Parameters~ and ~Resources~ this stack will have an
[[http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/outputs-section-structure.html][Outputs]] section. This will contain the domain name of the CloudFront
distribution created. We need this because later we will amend our DNS
template to set up an alias for that, rather than hard-code GitHub's
IP addresses in the =A= record for =superloopy.io=. The ~Outputs~ section is
at the top level of the YAML template, and looks like this:

#+caption: CloudFormation Outputs section
#+name: lst:outputs
#+BEGIN_SRC yaml
  Outputs:
    ApexCloudFrontDomain:
      Description: >-
        The CloudFront domain name for the Apex
        domain that we can use to add a CNAME to
        later.
      Value: !GetAtt CloudFront.DomainName
#+END_SRC

* Certificate
  :PROPERTIES:
  :CUSTOM_ID: certificate
  :END:

Next we create a [[http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-certificatemanager-certificate.html][Certificate]]. It is fairly easy: the only required
configuration is the domain name. However, we will also add a
~SubjectAlternativeName~ for the WWW sub-domain so we can use the same
cert for both. This goes in the ~Resources~ section:

#+caption: Creating AWS::CertificateManager::Certificate with SANs
#+name: lst:cert
#+BEGIN_SRC yaml
Resources:
  SSL:
    Type: 'AWS::CertificateManager::Certificate'
    Properties:
      DomainName: !Ref DomainName
      SubjectAlternativeNames:
        - !Join ['.', ['www', !Ref DomainName]]
#+END_SRC

* S3 Redirection bucket
  :PROPERTIES:
  :CUSTOM_ID: s3-redirection
  :END:

Next we create ~ApexBucket~---the bucket used for redirection from the
Apex domain to the WWW site proper. We'll use the [[http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-s3-bucket.html][AWS::S3::Bucket]]
resource for that. ~BucketName~ is---surprisingly, at least to me---not
required, but I would like to specify it so I can find it in the S3
console later.

I /think/ we just need the ~RedirectAllRequestsTo~ property, with its
~HostName~ attribute. Furthermore the point of all this was to add SSL
so let's force =HTTPS= as the protocol, despite the fact that my site
doesn't support that /yet/. (It will before I make this configuration
active.) Here's how this section looks:

#+caption: S3 bucket for redirection
#+name: lst:redirbucket
#+BEGIN_SRC yaml
Resources:
  [...]
  ApexBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Ref DomainName
      WebsiteConfiguration:
        RedirectAllRequestsTo:
          HostName: !Join ['.', ['www', !Ref DomainName]]
          Protocol: https
#+END_SRC

* CloudFront Distribution
  :PROPERTIES:
  :CUSTOM_ID: cloudfront
  :END:

Finally we need to set up the CloudFront distribution, using its
[[http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cloudfront-distributionconfig.html][AWS::CloudFront::Distribution]] resource. It has only one property, the
~DistributionConfig~, however, /its/ attributes are numerous. Luckily all
are not required. Let's start with ~Aliases~, which is our CNAME. This
is the name we /want/ to assign later. It has to match the SSL
certificate we'll assign later.

We also have to set ~Origins~, line [[(origins)]]. Rather than building the
DomainName for by ~!Join~-ing strings I use the ~WebsiteURL~ attribute. It
wasn't as successful as I had hoped, since I have to /split/ it to
separate the protocol from the domain name, as CloudFront wants only
the latter in its Origins section. One step forward, two steps back?

Moving swiftly on, the [[(customorigincfg)][CustomOriginConfig]][fn:1], [[(defaultcache)][DefaultCacheBehaviour]]
and [[(viewercert)][ViewerCertificate]] sections I cribbed from a template my colleague
[[http://doismellburning.co.uk][Kristian Glass]] provided as a reference point. I don't have much to say
about them, other than that they seem to do the job.

#+BEGIN_SRC yaml -n -r
  Resources:
    [...]
    ApexCloudFront:
      Type: 'AWS::CloudFront::Distribution'
      Properties:
        DistributionConfig:
          Aliases:
            - !Ref DomainName
          Enabled: True
          Origins:                                    (ref:origins)
            - DomainName: !Select
                - 1
                - !Split ["//", !GetAtt ApexBucket.WebsiteURL]
              Id: origin
              CustomOriginConfig:                     (ref:customorigincfg)
                OriginProtocolPolicy: http-only
          DefaultCacheBehavior:                       (ref:defaultcache)
            TargetOriginId: origin
            DefaultTTL: 5
            MaxTTL: 30
            ForwardedValues:
              QueryString: false
            ViewerProtocolPolicy: redirect-to-https
          ViewerCertificate:                          (ref:viewercert)
            AcmCertificateArn: !Ref SSL
            SslSupportMethod: sni-only
#+END_SRC

** CloudFront /really/ likes the =us-east-1= region
   :PROPERTIES:
   :CUSTOM_ID: cloudfront-like-us-east-1
   :END:

Attempting to create the above stack unfortunately fails with the
following error:

#+BEGIN_EXAMPLE
ApexCloudFront AWS::CloudFront::Distribution CREATE_FAILED The specified SSL certificate doesn't exist, isn't in us-east-1 region, isn't valid, or doesn't include a valid certificate chain.
#+END_EXAMPLE

I would /prefer/ to have the S3 bucket here in the UK where I am because
I believe it would make syncing my files to S3 faster. However,
CloudFormation cannot take input from stack output in other regions
and I don't want to have to manage /half/ my setup in CloudFormation and
half outside, so I'll relent and move my stack to =us-east-1= to satisfy
CloudFront for now[fn::Hopefully in the future CloudFront allows certs
made anywhere, and then I can re-create my stack in a region closer to
home.].

* Testing that redirection works
  :PROPERTIES:
  :CUSTOM_ID: testing-redirection
  :END:

Now that I'm using =us-east-1= as the region creating the stack
succeeds. But does it /work/? Since I haven't delegated DNS yet I use
the S3 website URL directly to test the redirection on its own.

#+BEGIN_SRC sh :results output :exports both :eval never-export
curl -v http://superloopy.io.s3-website-us-east-1.amazonaws.com/articles/2017/adding-ssl.html
#+END_SRC

#+RESULTS:
#+begin_example
[...]
< HTTP/1.1 301 Moved Permanently
[...]
< Location: https://www.superloopy.io/articles/2017/adding-ssl.html
#+end_example

So, yes! The S3 redirection setup looks like it's working! But... Does
the CloudFront setup work? This is where the ~Outputs~ section comes
in---I can ask Sceptre to display my stack's outputs:

#+BEGIN_SRC sh :results output :exports both :eval never-export
sceptre describe-stack-outputs superloopy www
#+END_SRC

#+RESULTS:
: - Description: The CloudFront domain name that we can add a CNAME to later.
:   OutputKey: Hostname
:   OutputValue: d117yhymq9s8zd.cloudfront.net

Plugging that domain name into my query results in:

#+BEGIN_SRC sh :results output :exports both :eval never-export
curl -v https://d117yhymq9s8zd.cloudfront.net/articles/2017/adding-ssl.html
#+END_SRC

#+RESULTS:
#+begin_example
[...]
< HTTP/1.1 301 Moved Permanently
[...]
< Location: https://www.superloopy.io/articles/2017/adding-ssl.html
#+end_example

Result!

* The completed template
  :PROPERTIES:
  :CUSTOM_ID: complete-template
  :END:

For the sake of completeness, here's my completed template:

#+caption: Complete =templates/www.yaml= template
#+name: lst:tpl-www
#+BEGIN_SRC yaml
  AWSTemplateFormatVersion: "2010-09-09"
  Parameters:
    DomainName:
      Type: String
      Default: example.net
  Outputs:
    ApexCloudFrontDomain:
      Description: >-
        The CloudFront domain name for the Apex
        domain that we can use to add a CNAME to
        later.
      Value: !GetAtt ApexCloudFront.DomainName
  Resources:
    SSL:
      Type: 'AWS::CertificateManager::Certificate'
      Properties:
        DomainName: !Ref DomainName
        SubjectAlternativeNames:
          - !Join ['.', ['www', !Ref DomainName]]
    ApexBucket:
      Type: 'AWS::S3::Bucket'
      Properties:
        BucketName: !Ref DomainName
        WebsiteConfiguration:
          RedirectAllRequestsTo:
            HostName: !Join ['.', ['www', !Ref DomainName]]
            Protocol: https
    ApexCloudFront:
      Type: 'AWS::CloudFront::Distribution'
      Properties:
        DistributionConfig:
          Aliases:
            - !Ref DomainName
          Enabled: True
          Origins:
            - DomainName: !Select
                - 1
                - !Split ["//", !GetAtt ApexBucket.WebsiteURL]
              Id: origin
              CustomOriginConfig:
                OriginProtocolPolicy: http-only
          DefaultCacheBehavior:
            TargetOriginId: origin
            DefaultTTL: 5
            MaxTTL: 30
            ForwardedValues:
              QueryString: false
            ViewerProtocolPolicy: redirect-to-https
          ViewerCertificate:
            AcmCertificateArn: !Ref SSL
            SslSupportMethod: sni-only
#+END_SRC

* Conclusion
  :PROPERTIES:
  :CUSTOM_ID: conclusion
  :END:

I am pretty happy with this setup. No doubt it will be useful when
moving all my sites to HTTPS over the next months.

* Footnotes

[fn:1] For a while I felt that I should be using an ~S3OriginConfig~
instead, but I didn't feel this was very well documented and I
couldn't manage to get that to work. A bit of reading implied that it
requires a [[http://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/private-content-restricting-access-to-s3.html][Origin Access Identity]] that cannot be created / added using
CloudFormation so I decided to just stick with the ~CustomOriginConfig~
instead. It's not like my S3 bucket's content is secret. I /also/ got
the impression that going that route means you don't get to benefit
from the "website hosting bucket" properties, which means no
~RedirectAllRequestsTo~ and no ~CustomErrorDocument~ and no ~IndexDocument~
properties.
* Abstract                                                         :noexport:

I show how to create an S3 bucket for redirecting web requests, put it
behind a CloudFront distribution, and configured /this/ with an SSL
certificate---all via CloudFormation.

#  LocalWords:  ApexCloudFrontDomain GetAtt DomainName SANs HostName
#  LocalWords:  SubjectAlternativeName SubjectAlternativeNames https
#  LocalWords:  ApexBucket BucketName RedirectAllRequestsTo ing http
#  LocalWords:  redirbucket WebsiteConfiguration cloudfront Kristian
#  LocalWords:  DistributionConfig WebsiteURL customorigincfg MaxTTL
#  LocalWords:  CustomOriginConfig defaultcache DefaultCacheBehaviour
#  LocalWords:  viewercert ViewerCertificate ApexCloudFront sni tpl
#  LocalWords:  OriginProtocolPolicy DefaultCacheBehavior DefaultTTL
#  LocalWords:  TargetOriginId ForwardedValues QueryString OutputKey
#  LocalWords:  ViewerProtocolPolicy AcmCertificateArn Hostname
#  LocalWords:  SslSupportMethod OutputValue AWSTemplateFormatVersion
#  LocalWords:  OriginConfig CustomErrorDocument IndexDocument
