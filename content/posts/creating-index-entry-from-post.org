#+title: Linking Org mode blog posts into the index page
#+date: <2018-06-25>
#+category: Emacs
#+category: Org
As mentioned when I [[../2017/blogging-with-org-mode.org][first moved to use Org mode for blogging]] I haven't
had a way to automatically create an index of posts. It's been a
rather tedious manual task, and now that I've [[file:org-mode-rss.org][added TAGs and the
=RSS_PERMALINK= property]] to the things I need to address I didn't want
to do it manually any more. I took the opportunity to learn a little
more Emacs lisp, and experiment with the Org APIs.

First and foremost I wanted a function that I could execute when
visiting a blog post that generated the index entry for me, ready to
paste into the index page. The ~parse-metadata~ function below is what
I came up with. I query the Org parse tree for the title, date and
category keywords, and the =abstract= special block. I created a
little helper ~sb/org-kw-get~ function to avoid repetition, since I
expected to extract three different keywords in the same way. (I've
since decided not to extract =DATE= keywords). Figuring out how to
extract the /abstract/ was much harder, but I managed something that
works well enough.

For generating the entry (in index.org) for my blog post I use Org
mode programmatically. One caveat was that some of the APIs (I think
most notably the ~org-set-tags-to~ call) would not work until I turned
on Org mode in my temporary buffer. Instead of returning this as a
string, I copy it to my kill ring so it's ready for pasting into the
index page.

#+BEGIN_SRC emacs-lisp -n -r
(defun sb/org-kw-get (key)
  "Return a lambda that takes an Org keyword
element and returns its :value property if its :key
property matches `key'."
  `(lambda (kw)
     (if (equal ,key (org-element-property :key kw))
	 (org-element-property :value kw))))

(defun sb/parse-metadata ()
  "Call in a blog post to get an entry suitable for
linking to this post from the index page."
  (interactive)
  (let* ((path (s-chop-prefix
		(expand-file-name "~/blog/")
		(buffer-file-name)))
	 (tree (org-element-parse-buffer))

	 (title
	  (org-element-map tree 'keyword
	    (sb/org-kw-get "TITLE") nil t))

	 (categories
	  (org-element-map tree 'keyword
	    (sb/org-kw-get "CATEGORY")))

	 (abstract
	  (org-element-interpret-data
	   (org-element-map tree 'special-block
	     (lambda (sb)
	       (if (equal "abstract"
			  (org-element-property :type sb))
		   (org-element-contents sb)))))))))

(with-temp-buffer
  (org-mode)
  (org-insert-heading)

  ;; Would have loved to use `org-insert-link' here but
  ;; I can't stop it from presenting a prompt :-(
  (insert "[[file:" path "][" title "]]")

  (insert "\n\n")
  (insert abstract)

  (org-set-property "PUBDATE" date)
  (org-set-property "RSS_PERMALINK"
		    (format "%s.html"
			    (s-chop-suffix ".org" path)))

  ;; Need to go back to the first line to set tags
  (goto-char (point-min))
  (org-set-tags-to categories)
  (org-set-tags nil t) ;; adjust tags in the source

  ;; Copy the contents of the temporary buffer as a string
  ;; *without properties* to my kill ring for pasting into
  ;; my index.org file
  (copy-region-as-kill
   (point-min) (point-max)))
#+END_SRC

* Post-Abstract                                                    :noexport:

I wanted it to be easy to create a new entry on the index page. I call
on Emacs Lisp to help.

#  LocalWords:  TAGs RSS PERMALINK APIs sb SRC PUBDATE goto
